[{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"Kubernetes","Description":"Learning Kubernetes","Picture":[],"SubCodeContent":[]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"Docker","Description":"Learning how to work with Docker","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"markdown","uri":"3 01","value":"# Docker image creation\n# 1 Create a file called Dockerfile without any extensions\nDockerfile\n# 2 Fill the content of the file with the following content\n\nFROM alpine:3\n\nCDM echo \u0022Hello from alpine\u0022\n\n# 3 Build the docker image\ndocker build . -t myalpineimage:2020\n\n# 4 Running the image\ndocker run myalpineimage:2020\n\n\n\n#####\nDifferences between run vs cmd and entry\n\nRUN: executes when BUILDING the image (an example when you are calling external dependencies using Curl for instead or when you want to call external links)\n\nCMD and ENTRYPOINT: execute when the container starts\n\ndifference between CMD and ENTRYPOINT\nENTRYPOINT determines the first thing to run and CMD the additional things to run\n\n\n\n\n# To find and delete a container, you can follow these steps:\n\n# List all the running containers on your system using the docker ps command:\n\ndocker ps -a\n\n# This will display a list of all the running containers along with their details.\n\n# Identify the container you want to delete from the list. Take note of the container ID or name.\n\n# Stop the container (if it is running) using the docker stop command followed by the container ID or name:\n\ndocker stop \u003Ccontainer_id_or_name\u003E\n\n# This will gracefully stop the container.\n\n# Delete the container using the docker rm command followed by the container ID or name:\n\ndocker rm \u003Ccontainer_id_or_name\u003E\n\nThis will remove the container from your system.\n\nIf you want to delete a container that is not currently running, you can skip the docker stop step and directly use the docker rm command to delete it.\n\nRemember that deleting a container will permanently remove it and any data stored within it. Make sure you have a backup or have exported any necessary data before deleting a container.\n\n\n\n\n# To delete a Docker image, you can follow these steps:\n\nList all the Docker images on your system using the docker images command:\n\ndocker images\n\nThis will display a list of all the Docker images along with their details.\n\nIdentify the image you want to delete from the list. Take note of the image ID or repository and tag.\n\nDelete the image using the docker rmi command followed by the image ID or repository and tag:\n\n# docker rmi \u003Cimage_id\u003E\n\nor\n\n# docker rmi \u003Crepository\u003E:\u003Ctag\u003E\n\nReplace \u003Cimage_id\u003E with the actual image ID or \u003Crepository\u003E:\u003Ctag\u003E with the repository and tag of the image you want to delete.\n\nIf the image has multiple tags, you can specify any of the tags to delete the image. If you want to delete all tags of an image, you can use the -f flag to force deletion:\n\n# docker rmi -f \u003Crepository\u003E:\u003Ctag\u003E\n\nNote that if the image is being used by any running containers, you will need to stop and remove those containers before you can delete the image.\n\nRemember that deleting an image will permanently remove it from your system. Make sure you have a backup or have pushed the image to a remote registry if you want to retain it for future use.\n\n\n\n\n####\n\n# You can also build an image using a path, e.g:\n\ndocker build \u003Cpath\u003E -t rce:1\n\n\n#### House keeping\n# to view images\ndocker image ls\n\n# deleting images\ndocker image rm \u003Cimage id\u003E  or with name:\ndocker image rm \u003Cimage name\u003E\n\n# deleting all the images\n\ndocker image rm $(docker image ls -aq)    (-q stands for all the unique image IDs)\n\n# Link\nhttps://docs.docker.com/reference/cli/docker/image/\n\n### Container house keeping\n# to view containers\ndocker container ls        another way is:\ndocker container ps\n\n# to stop container\ndocker container stop \u003Cdocker id\u003E\n\n# Stoping all the containers\ndocker container stop $(docker container ls -aq)\n\n# Link\nhttps://docs.docker.com/reference/cli/docker/container/\n\n# to clear a cache of our container we can use pruning when it is not used, this removes all stopped containers\n\ndocker container prune \n \n#### This is how you create a docker container with your own name:\ndocker container run -d -p 8080:80 --name=mywebserv httpd:2.4\n\n### ENTRYPOINT\nsets the main process\n\n\n\n\n#####\n## https://hub.docker.com/_/microsoft-dotnet\n#FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\n#WORKDIR /source\n##ENV DOTNET_URLS=http://\u002B:8080\n#\n#\n## copy csproj and restore as distinct layers\n#COPY *.sln .\n#COPY ./EmployeeApi/*.csproj ./EmployeeApi/\n#RUN dotnet restore\n#\n## copy everything else and build app\n#COPY ./EmployeeApi/. ./EmployeeApi/\n#WORKDIR /source/EmployeeApi\n#RUN dotnet publish -c release -o /app --no-restore\n#\n## final stage/image\n#FROM mcr.microsoft.com/dotnet/aspnet:8.0\n#WORKDIR /app\n#COPY --from=build /app ./\n#ENTRYPOINT [\u0022dotnet\u0022, \u0022EmployeeApi.dll\u0022]"},"picture":[],"title":"Docker quick notes"}]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"C# Shortcuts","Description":"C# commands I have learnt earlier","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"markdown","uri":"4 01","value":"\u0060cw \u002B tab\u0060 - Console.WriteLine(\u201CHello world\u201D);\n\n\u0060Command X\u0060 - deletes or clears an upper line"},"picture":[],"title":"C# commands"}]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"AZ 900","Description":"AZ 900 Exam notes","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"markdown","uri":"5 01","value":"1. What is high availability in a public cloud environment dependent on?\n        1. It is dependent on the service-level agreement (SLA) that you choose (Different services have different SLAs. Sometimes different tiers of the same service will offer different SLAs, which can increase or decrease  the promised availability.)\n2.  An example of [answer choice] is automatically calling an application to ensure that the application has the resources needed to meet customer demands.\n            1. Elasticity (Elasticity refers to the ability to scale resources as needed, such as during business hours, to ensure that an application can keep up with demand, and then reducing the availability resources during off-peak hours. Agility refers to the ability to deploy new applications and service quickly. High availability refers to the ability to ensure that a service or application remains available in the event of a failure. Geo-distribution makes a service or application available in multiple geographic locations that are typically close to your users.)\n3. Which type of cloud service model is typically licensed through a monthly or annual subscription?\n    1. Software as a service (SaaS)\n4. Availability zones are physically separate datacenter within an Azure region. Each availability zone is made up of one or more datacenter equipped with independent power, cooling, and networking.\n5. Resources can only be associated with a single subscription. Subscriptions may be grouped into management groups. An account may be associated with multiple subscriptions.\n6. Management group can be used in environments that have multiple subscriptions to streamline the application of governance conditions. Resource groups can be used to organise Azure resources. Administrative units are used to delegate the administration of Microsoft Entra resources, such as users and groups. Accounts are used to provide access to resources.\n7. Azure Resource Manager (ARM) - is the deployment and management service for Azure. It provides a management layer that enables you to create, update, and delete resources in an Azure subcriptions. You use management features, such as access control, resource locks, and resource tags, to secure and organise resources after deployment.\n8. Azure Virtual Machine Scale Sets - are an Azure resource that you can use to deploy and manage and scale a set of identical virtual machines.\n9. What can you use to connect Azure resources, such as Azure SQL databases, to an Azure virtual network? - Service endpoints \n10. Service endpoints are used to expose Azure services to a virtual network, providing communication between the two. ExpressRoute is used to connect an on-premises network to Azure. NSGs allow you to configure inbound and outbound rules for virtual machines. Peering allows you to connect virtual networks together.\n11. What can you use to provide Mac and Android users with access to a Windows environment that will run Windows environment that will run Windows-based applications? - Azure Virtual Desktops\n12. Azure Virtual Desktop is a desktop and application virtualisation service that runs in the cloud. It enables your users to use a cloud-hosted version of Windows from any location. Azure Virtual Desktop works across devices such as Windows, Mac, iOS, Android, and Linux. It works with apps that you can use to access Remote Desktops and apps. You can also use most modern browsers to access Azure Virtual Desktop-hosted experiences.\n13. Azure Blob storage is an object storage solution that you can use to store massive amounts of unstructured data, such as text or binary data.\n14. Which two protocols can be used to access Azure file shares? Each correct answer presents a complete solution - Network File System (NFS) and Server message Block (SMB)\n15. Resource tags are used to locate and act on resources associated with specific workloads, environments, business units, and owners.\n16. Key Vault is a centralised cloud service for storing an application secrets in a single, central location.\n17. The perimeter layer is about protecting an organisation\u2019s resources from network-based attacks.\n18. Which two factors affect Azure costs? - Resource location and resource usage\n19. Azure Cost Management allows you to create and manage cost and usage budgets by monitoring resource demand trends, consumption rates, and cost patterns. It allows you to use historical data generate reports and forecast future usage and expenditures.\n20. What can you use to minimise the costs of the virtual machines without reducing the functionality of the virtual machines? - Azure reservations\n21. Azure reservations - offers discounted prices on certain Azure services. Azure Reservations can save you up to 72 percent compared to pay-as-you-go prices. To receive a discount, you can reserve services and resources by paying in advance.\n22. Spending limits can suspend a subscription when the spend limit is reached.\n23. What can you use to define the resources you want to provision in a declarative JSON format? - Azure Resource Manager (ARM) template\n24. After an outage, Service Health provides official incident reports called root cause analysis (RCA), which you can share with stakeholders.\n25. Azure Monitor is a platform that collects metric and logging data, such as CPU percentages. The data can be used to trigger autoscaling.\n26. Health advisories are issues that require that you take proactive action to avoid service interruptions, such as service retirements and breaking changes. Service issues are problems such as outages that require immediate actions.\n27. What type of cloud service are virtual networks? - Infrastructure as a service (IaaS)\n28. For which resource does Azure generate separate billing reports and invoices by default - Subscription\n29. ExpressRoute and Azure VPN Gateway are two services that you can use to connect an on-premises network to Azure.\n30. Bastion provides a web interface to remotely administer Azure virtual machines by using SSH/RDP.\n31. The Archive storage tier stores data offline and offers the lowest storage costs, but also the highest costs to rehydrate and access data. \n32. The Hot storage tier is optimised for storing data that is accessed frequently. \n33. Data in the Cool access tier can tolerate slightly lower availability, but still requires high durability, retrieval latency, and throughput characteristics similar to hot data.\n34. What can you use to get notifications about an outage in a specific Azure region? - Azure Service Health\n35. What can you use to restrict the deployment of a virtual machine to a specific location? - Azure Policy\n36. Azure SQL Database - it is a platform as a service (PaaS)\n\nAvailability Set\n\nQuestions to look into:\nWhich Azure Blob storage tier stores data offline and offers the lowest storage costs and the highest costs to access data?"},"picture":[],"title":"AZ 900 notes"},{"isEditing":false,"codeModel":{"language":"markdown","uri":"2 11","value":"# Task\n\n- Opex\n"},"picture":[],"title":"To do"}]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"URL Endpoint","Description":"How to call a url when there is space in between words on the url","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"markdown","uri":"6 01","value":"# Let us say you wanted to call a url with the following syntax:\n- http:hello wolrd/Deposit/20000\n\n# This is how you would call such url:\n- http:hello%20wolrd/Deposit/20000"},"picture":[],"title":"Using %20 on a url"}]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"Mac Keyboard Shortcut","Description":"Shortcuts - NB# Not life shortcuts","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"markdown","uri":"7 01","value":"# Taking a screenshot (partly screenshot)\n- Command \u002B Shift \u002B 4 \n\n# Taking a screenshot (full screenshot)\n- Command \u002B Shift \u002B 3\n\n# Forcing an application to quit:\n- Command \u002B option \u002B esc, then manually select the application you want to forcefully stop\n\n# Showing hidden files\n- Command \u002B Shift \u002B Period\n    -# When looking for the host file, you then go on drive folder then look for etc, under this file you find the host file"},"picture":[],"title":"Mac keyboard shortcuts"}]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"T1 Test","Description":"Adding T1 test to your project","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"markdown","uri":"8 01","value":"# To add unit tests to your .NET project, you can follow these general steps:\n\n1. Create a new project for your unit tests: In your solution, right-click on the solution or the project \nwhere you want to add the unit tests, select \u0022Add\u0022 \u003E \u0022New Project\u0022, and choose the appropriate unit testing \nframework for your project. For example, you can choose \u0022NUnit\u0022 or \u0022xUnit\u0022 for .NET Core projects, or \u0022MSTest\u0022 \nfor .NET Framework projects.\n\n2. Add references: Ensure that the project containing the code you want to test is referenced by the unit test project. \nRight-click on the unit test project, select \u0022Add\u0022 \u003E \u0022Reference\u0022, and choose the project you want to test.\n\n3. Write your unit tests: In the unit test project, create a new class or classes to contain your unit tests. \nEach test method should be decorated with an appropriate attribute from the chosen testing framework \n(e.g., [Test] for NUnit, [Fact] for xUnit, or [TestMethod] for MSTest). Write the necessary code to set up the test \nscenario, call the code you want to test, and assert the expected results.\n\n4. Run the tests: Build your solution, and then run the unit tests. Most testing frameworks provide test runners that \nintegrate with popular IDEs like Visual Studio or offer command-line options for running tests. You can also use a \ncontinuous integration (CI) system to automatically run your tests on every code change.\n\n5. Analyze test results: After running the tests, review the test results to see if any tests failed. If a test fails, \ninvestigate the cause and fix the underlying issue in your code.\n\n6. Maintain and update tests: As your project evolves, update your unit tests to reflect changes in the code. Add new \ntests for new features or bug fixes, and modify existing tests as needed.\n\n7. Remember, writing effective unit tests requires careful consideration of different scenarios and edge cases to ensure \ncomprehensive test coverage.\n"},"picture":[],"title":"Steps to add T1 tests to your project"}]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"OpenTelemetry","Description":"How to add instrumentation to your application using OpenTelemetry when working on a ASP.NET Core application.","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"css","uri":"10 01","value":"using OpenTelemetry.Logs;\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Resources;\nusing OpenTelemetry.Trace;\n\n// Ideally, you will want this name to come from a config file, constants file, etc.\nvar serviceName = \u0022dice-server\u0022;\nvar serviceVersion = \u00221.0.0\u0022;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(resource =\u003E resource.AddService(\n        serviceName: serviceName,\n        serviceVersion: serviceVersion))\n    .WithTracing(tracing =\u003E tracing\n        .AddSource(serviceName)\n        .AddAspNetCoreInstrumentation()\n        .AddConsoleExporter())\n    .WithMetrics(metrics =\u003E metrics\n        .AddMeter(serviceName)\n        .AddConsoleExporter());\n\nbuilder.Logging.AddOpenTelemetry(options =\u003E options\n    .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(\n        serviceName: serviceName,\n        serviceVersion: serviceVersion))\n    .AddConsoleExporter());\n\nbuilder.Services.AddControllers();\n\nvar app = builder.Build();\n\napp.MapControllers();\n\napp.Run();\n"},"picture":[],"title":"Program.cs file"},{"isEditing":false,"codeModel":{"language":"css","uri":"10 11","value":"using System.Diagnostics;\n\n/// \u003Csummary\u003E\n/// [This file is for referencing your ActivitySource]\n/// It is recommended to use a custom type to hold references for ActivitySource.\n/// This avoids possible type collisions with other components in the DI container.\n/// \u003C/summary\u003E\npublic class Instrumentation : IDisposable\n{\n    internal const string ActivitySourceName = \u0022dice-server\u0022;\n    internal const string ActivitySourceVersion = \u00221.0.0\u0022;\n\n    public Instrumentation()\n    {\n        this.ActivitySource = new ActivitySource(ActivitySourceName, ActivitySourceVersion);\n    }\n\n    public ActivitySource ActivitySource { get; }\n\n    public void Dispose()\n    {\n        this.ActivitySource.Dispose();\n    }\n}\n"},"picture":[],"title":"Instrumentation.cs."},{"isEditing":false,"codeModel":{"language":"css","uri":"2 21","value":"//...\n\n// Register the Instrumentation class as a singleton in the DI container.\nbuilder.Services.AddSingleton\u003CInstrumentation\u003E();\n\nbuilder.Services.AddControllers();\n\nvar app = builder.Build();\n\napp.MapControllers();\n\napp.Run();\n"},"picture":[],"title":"Then we will update the Program.cs to add the Instrument object as a dependency injection:"},{"isEditing":false,"codeModel":{"language":"css","uri":"2 31","value":"using CodeAPI.Models;\nusing Microsoft.AspNetCore.Mvc;\nusing MongoDB.Bson;\nusing System.Diagnostics;\nusing CodeAPI.Constants;\n\nnamespace CodeAPI.Controllers;\n\n[ApiController]\n[Route(\u0022[controller]\u0022)]\npublic class CodeContentController: ControllerBase\n{\n    private ICodeContentFactory _codeContentFactory;\n    \n    // For OpenTelemetry Instrumentation\n    private ILogger\u003CCodeContentController\u003E logger;\n    private ActivitySource activitySource;\n\n    public CodeContentController(ICodeContentFactory codeContentFactory, ILogger\u003CCodeContentController\u003E logger, Instrumentation instrumentation)\n    {\n        this.logger = logger;\n        _codeContentFactory = codeContentFactory;\n        activitySource = instrumentation.ActivitySource;\n    }\n\n    /// \u003Csummary\u003E\n    /// Gets all CodeContent saved from the database\n    /// \u003C/summary\u003E\n    /// \u003Cremarks\u003EThis function should get CodeContent and return it with status code 200\u003C/remarks\u003E\n    /// \u003Cresponse code=\u0022200\u0022\u003ECodeContent returned\u003C/response\u003E\n    /// \u003Cresponse code=\u0022500\u0022\u003EServer or DB is down\u003C/response\u003E\n    [HttpGet(\u0022/GetAll\u0022, Name = \u0022GetAll\u0022)]   \n    public async Task\u003CIActionResult\u003E GetAll()\n    {\n        using (var myActivity = activitySource.StartActivity(OpenTelemetryConstants.ServiceName))\n        {\n            var codeContents = await _codeContentFactory.GetAllCodeContents();\n\n            if (codeContents == null)\n            {\n                StatusCode(500);\n                logger.LogError(\u0022Server down\u0022);\n                myActivity.SetTag(\u0022Error: Server might be down\u0022, StatusCode(500));\n                return NotFound(\u0022Server might be down, try again after an hour\u0022);\n            }\n            logger.LogInformation(\u0022Content successfully retrieved: {result}\u0022, codeContents);\n            myActivity.SetTag(\u0022Content successfully retrieved, the length of the content is: \u0022, codeContents.Count);\n            return Ok(codeContents);\n        }\n    }\n    \n    /// \u003Csummary\u003E\n    /// Adds CodeContent into the database\n    /// \u003C/summary\u003E\n    /// \u003Cremarks\u003EThis function should add CodeContent into the database\u003C/remarks\u003E\n    /// \u003Cresponse code=\u0022200\u0022\u003EAdded CodeContent returned\u003C/response\u003E\n    /// \u003Cresponse code=\u0022400\u0022\u003ECodeCode content is null \u003C/response\u003E\n    /// \u003Cresponse code=\u0022500\u0022\u003EServer or DB is down\u003C/response\u003E\n    [HttpPost(\u0022/AddContent\u0022, Name = \u0022AddContent\u0022)]\n    public async Task\u003CIActionResult\u003E AddContent(CodeContent codeContent)\n    {\n        using (var myActivity = activitySource.StartActivity(OpenTelemetryConstants.ServiceName))\n        {\n            if (codeContent == null)\n            {\n                StatusCode(400);\n                myActivity.SetTag(\u0022CodeContent cannot be null\u0022, StatusCode(400));\n                return BadRequest(\u0022CodeContent cannot be null\u0022);\n            }\n\n            codeContent.Id = ObjectId.GenerateNewId();\n\n            await _codeContentFactory.AddCodeContent(codeContent);\n            myActivity.SetTag(\u0022Content successfully added: \u0022, codeContent);\n            return CreatedAtAction(nameof(GetCodeContentById), new { id = codeContent.Id }, codeContent);\n            \n        }\n    }\n\n    /// \u003Csummary\u003E\n    /// Gets CodeContent from the database using an id\n    /// \u003C/summary\u003E\n    /// \u003Cremarks\u003EThis function should get CodeContent from the database\u003C/remarks\u003E\n    /// \u003Cresponse code=\u0022200\u0022\u003EReturns CodeContent\u003C/response\u003E\n    /// \u003Cresponse code=\u0022400\u0022\u003ECodeContent missing or user provided incorrect ID\u003C/response\u003E\n    /// \u003Cresponse code=\u0022500\u0022\u003EServer or DB is down\u003C/response\u003E\n    [HttpGet(\u0022{id}\u0022)]\n    public async Task\u003CIActionResult\u003E GetCodeContentById(string id)\n    {\n        using (var myActivity = activitySource.StartActivity(OpenTelemetryConstants.ServiceName))\n        {\n\n            if (!ObjectId.TryParse(id, out var objectId))\n            {\n                StatusCode(400);\n                myActivity.SetTag(\u0022Invalid ID format\u0022, StatusCode(400));\n                return BadRequest(\u0022Invalid ID format\u0022);\n            }\n\n            var codeContent = await _codeContentFactory.GetCodeContentById(objectId);\n            if (codeContent == null)\n            {\n                StatusCode(500);\n                myActivity.SetTag(\u0022Something went wrong with retrieving CodeContent by ID: \u0022, StatusCode(500));\n                return NotFound();\n            }\n            \n            myActivity.SetTag(\u0022Content successfully retrieved: \u0022, codeContent);\n            return Ok(codeContent);\n        }\n    }\n    \n    /// \u003Csummary\u003E\n    /// Updates CodeContent from the database\n    /// \u003C/summary\u003E\n    /// \u003Cremarks\u003EThis function should update CodeContent from the database\u003C/remarks\u003E\n    /// \u003Cresponse code=\u0022200\u0022\u003EReturn status code 200\u003C/response\u003E\n    /// \u003Cresponse code=\u0022400\u0022\u003ECodeContent missing/ has incorrect values\u003C/response\u003E\n    /// \u003Cresponse code=\u0022500\u0022\u003EServer or DB is down\u003C/response\u003E\n    [HttpPut(\u0022{id}\u0022)]\n    public async Task\u003CIActionResult\u003E UpdateCodeContent(string id, CodeContent codeContent)\n    {\n        using (var myActivity = activitySource.StartActivity(OpenTelemetryConstants.ServiceName))\n        {\n            if (!ObjectId.TryParse(id, out var objectId))\n            {\n                if (codeContent == null)\n                {\n                    myActivity.SetTag(\u0022Supplied null CodeContent\u0022, codeContent);\n                    return StatusCode(400, \u0022CodeContent cannot be null\u0022);\n                }\n\n                myActivity.SetTag(\u0022User supplied invalid ID format: \u0022, codeContent);\n                return BadRequest(\u0022Invalid ID format\u0022);\n            }\n\n            codeContent.Id = objectId;\n\n            await _codeContentFactory.UpdateCodeContent(codeContent);\n            myActivity.SetTag(\u0022CodeContent retrieved successfully: \u0022, codeContent);\n            return Ok();\n        }\n    }\n\n    /// \u003Csummary\u003E\n    /// Deletes CodeContent from the database\n    /// \u003C/summary\u003E\n    /// \u003Cremarks\u003EThis function should delete a CodeContent from the database using an ID\u003C/remarks\u003E\n    /// \u003Cresponse code=\u0022200\u0022\u003ETrue is returned\u003C/response\u003E\n    /// \u003Cresponse code=\u0022400\u0022\u003ECodeContent missing/ ID is incorrect\u003C/response\u003E\n    /// \u003Cresponse code=\u0022500\u0022\u003EServer or DB is down\u003C/response\u003E\n    [HttpDelete(\u0022DeleteContent/{id}\u0022)]\n    public async Task\u003CIActionResult\u003E DeleteCodeContent(string id)\n    {\n        using (var myActivity = activitySource.StartActivity(OpenTelemetryConstants.ServiceName))\n        {\n            var st = id;\n            if (!ObjectId.TryParse(id, out var objectId))\n            {\n                myActivity.SetTag(\u0022Invalid ID format \u0022, StatusCode(400));\n                return BadRequest(\u0022Invalid ID format\u0022);\n            }\n\n            var results = await _codeContentFactory.DeleteCodeContent(objectId);\n\n            if (results)\n            {\n                StatusCode(200);\n                myActivity.SetTag(\u0022Code content deleted successfully\u0022, StatusCode(400));\n                return new JsonResult(results);\n            }\n\n            StatusCode(400);\n            myActivity.SetTag(\u0022Code content does not exist in the database or the server is done \u0022, StatusCode(400));\n            return new JsonResult(results);\n        }\n    }\n}"},"picture":[],"title":"An example of using is in your Controller file"},{"isEditing":false,"codeModel":{"language":"yaml","uri":"2 41","value":"# Jaeger natively supports OTLP to receive trace data. You can run Jaeger in a docker container with the UI accessible on port 16686 and OTLP enabled on ports 4317 and 4318:\n\ndocker run --rm \\\n  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one:latest\n"},"picture":[],"title":"Jaeger Backend Setup"},{"isEditing":false,"codeModel":{"language":"markdown","uri":"2 51","value":"# Now following the instruction to setup the OTLP exporters for Jaeger:\n\n- https://opentelemetry.io/docs/languages/net/exporters/#otlp-dependencies\n"},"picture":[],"title":"Jaeger usage"},{"isEditing":false,"codeModel":{"language":"markdown","uri":"2 61","value":"# This is the github page for OpenTelemetry\n\n- https://github.com/open-telemetry/opentelemetry-collector/blob/main/processor/batchprocessor/README.md"},"picture":[],"title":"Batch Processing with OpenTelemetry"}]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"T1 Test","Description":"asdfasdf","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"javascript","uri":"10 01 1","value":"// Enter your javascript code below ... "},"picture":[],"title":"adfadsf"}]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"Playwright Tests","Description":"Writing tests using Playwright and .Net","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"markdown","uri":"11 01","value":"\n1. Right click on your project and add a new project playwright test\n\n2. Install:\n    pwsh bin/Debug/net8.0/playwright.ps1 install \n    - However, you need to have Powershell to run this command\n\n3. Update your Microsoft.Playwright.Unit package to 1.40.0 to be able to auto generate assertion when using codegen to\ngenerate tests for your project\n\n4. Generate tests using Codegen with the following command:\n    - pwsh bin/Debug/net8.0/playwright.ps1 codegen demo.playwright.dev/todomvc\n\n5. Add this generated  code for testing into your Unit tests\n"},"picture":[],"title":"Steps for installing playwright"}]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"Semantic Versioning","Description":"Semantic Versioning is a recommended approach for effectively managing package versions.","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"markdown","uri":"12 01","value":"# Semantic versions are comprised of three numeric components: Major, Minor, and Patch\n\nThe Patch number is incremented after fixing a bug. When releasing a new backward-compatible feature, you increment the Minor version and reset the Patch version to 0. Conversely, when making a backward-incompatible change, you increment the Major version and reset both the Minor and Patch versions to 0.\n\nSemantic Versioning also supports the use of prerelease labels to tag packages. Simply append a hyphen followed by your prerelease tag, for example: 1.0.0-beta."},"picture":[],"title":"More about Semantic Versioning"}]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"Testing","Description":"Testging again","Picture":[],"SubCodeContent":[]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"Playwright Tests","Description":"Writing tests using Playwright and .Net","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"markdown","uri":"11 01","value":"\n1. Right click on your project and add a new project playwright test\n\n2. Install:\n    pwsh bin/Debug/net8.0/playwright.ps1 install \n    - However, you need to have Powershell to run this command\n\n3. Update your Microsoft.Playwright.Unit package to 1.40.0 to be able to auto generate assertion when using codegen to\ngenerate tests for your project\n\n4. Generate tests using Codegen with the following command:\n    - pwsh bin/Debug/net8.0/playwright.ps1 codegen demo.playwright.dev/todomvc\n\n5. Add this generated  code for testing into your Unit tests\n"},"picture":[],"title":"Steps for installing playwright"}]},{"Id":{"Timestamp":0,"Machine":0,"Pid":0,"Increment":0,"CreationTime":"1970-01-01T00:00:00Z"},"Title":"Last check","Description":"Writing tests using Playwright and .Net","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"markdown","uri":"11 01","value":"\n1. Right click on your project and add a new project playwright test\n\n2. Install:\n    pwsh bin/Debug/net8.0/playwright.ps1 install \n    - However, you need to have Powershell to run this command\n\n3. Update your Microsoft.Playwright.Unit package to 1.40.0 to be able to auto generate assertion when using codegen to\ngenerate tests for your project\n\n4. Generate tests using Codegen with the following command:\n    - pwsh bin/Debug/net8.0/playwright.ps1 codegen demo.playwright.dev/todomvc\n\n5. Add this generated  code for testing into your Unit tests\n"},"picture":[],"title":"Steps for installing playwright"}]},{"Id":{"Timestamp":1724078878,"Machine":13655318,"Pid":3562,"Increment":16514218,"CreationTime":"2024-08-19T14:47:58Z"},"Title":"Another check","Description":"Writing tests using Playwright and .Net","Picture":[],"SubCodeContent":[{"isEditing":false,"codeModel":{"language":"markdown","uri":"11 01","value":"\n1. Right click on your project and add a new project playwright test\n\n2. Install:\n    pwsh bin/Debug/net8.0/playwright.ps1 install \n    - However, you need to have Powershell to run this command\n\n3. Update your Microsoft.Playwright.Unit package to 1.40.0 to be able to auto generate assertion when using codegen to\ngenerate tests for your project\n\n4. Generate tests using Codegen with the following command:\n    - pwsh bin/Debug/net8.0/playwright.ps1 codegen demo.playwright.dev/todomvc\n\n5. Add this generated  code for testing into your Unit tests\n"},"picture":[],"title":"Steps for installing playwright"}]}]